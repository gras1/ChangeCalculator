1. in the Terminal window from the repo root, create a solution file, type:
dotnet new sln --name Experian.Net.ChangeCalculator

2. in the Terminal window from the repo root, type:
dotnet new classlib -f net6.0 -n Experian.Net.ChangeCalculator.Logic

3. in the Terminal window cd in to the Experian.Net.ChangeCalculator.Logic folder, then type:
dotnet add package Ardalis.GuardClauses

4. add the project reference to the solution, in the Terminal window from the repo root, type:
dotnet sln add ./Experian.Net.ChangeCalculator.Logic/Experian.Net.ChangeCalculator.Logic.csproj

5. in the Terminal window from the repo root, type:
dotnet new xunit -f net6.0 -n Experian.Net.ChangeCalculator.Logic.Tests

6. add the project reference to the solution, in the Terminal window from the repo root, type:
dotnet sln add ./Experian.Net.ChangeCalculator.Logic.Tests/Experian.Net.ChangeCalculator.Logic.Tests.csproj

7. add the inter project references, in the Terminal window from the repo root, type:
dotnet add ./Experian.Net.ChangeCalculator.Logic.Tests/Experian.Net.ChangeCalculator.Logic.Tests.csproj reference ./Experian.Net.ChangeCalculator.Logic/Experian.Net.ChangeCalculator.Logic.csproj

8. in the Terminal window from the repo root, type:
dotnet new classlib -f net6.0 -n Experian.Net.ChangeCalculator.Shared

9. in the Terminal window cd in to the Experian.Net.ChangeCalculator.Shared folder, then type:
dotnet add package Ardalis.GuardClauses

10. add the project reference to the solution, in the Terminal window from the repo root, type:
dotnet sln add ./Experian.Net.ChangeCalculator.Shared/Experian.Net.ChangeCalculator.Shared.csproj

11. add the inter project references, in the Terminal window from the repo root, type:
dotnet add ./Experian.Net.ChangeCalculator.Logic/Experian.Net.ChangeCalculator.Logic.csproj reference ./Experian.Net.ChangeCalculator.Shared/Experian.Net.ChangeCalculator.Shared.csproj
dotnet add ./Experian.Net.ChangeCalculator.Logic.Tests/Experian.Net.ChangeCalculator.Logic.Tests.csproj reference ./Experian.Net.ChangeCalculator.Shared/Experian.Net.ChangeCalculator.Shared.csproj

12. in the Terminal window cd in to the Experian.Net.ChangeCalculator.Logic.Tests folder, then type:
dotnet add package FluentAssertions
dotnet add package Microsoft.AspNetCore.Mvc.Testing
dotnet add package Xunit.Gherkin.Quick

13. Create a folder called `features` under the Experian.Net.ChangeCalculator.Logic.Tests folder  
- Add a file called ChangeCalculatorSpecs.feature to the features folder 
- Add the following to Experian.Net.ChangeCalculator.Logic.Tests.csproj:  

    <ItemGroup>
        <None Update="features\ChangeCalculatorSpecs.feature">
            <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
        </None>
    </ItemGroup>

14. in the Terminal window from the repo root, type:
dotnet new webapi -f net6.0 -n Experian.Net.ChangeCalculator.Api

15. add the project reference to the solution, in the Terminal window from the repo root, type:
dotnet sln add ./Experian.Net.ChangeCalculator.Api/Experian.Net.ChangeCalculator.Api.csproj

16. in the Terminal window cd in to the Experian.Net.ChangeCalculator.Api folder, then type:
dotnet add package FluentValidation
dotnet add package Ardalis.GuardClauses

17. in the Terminal window from the repo root, type:
dotnet new xunit -f net6.0 -n Experian.Net.ChangeCalculator.Api.Tests

18. add the project reference to the solution, in the Terminal window from the repo root, type:
dotnet sln add ./Experian.Net.ChangeCalculator.Api.Tests/Experian.Net.ChangeCalculator.Api.Tests.csproj

19. add the inter project references, in the Terminal window from the repo root, type:
dotnet add ./Experian.Net.ChangeCalculator.Api/Experian.Net.ChangeCalculator.Api.csproj reference ./Experian.Net.ChangeCalculator.Shared/Experian.Net.ChangeCalculator.Shared.csproj
dotnet add ./Experian.Net.ChangeCalculator.Api/Experian.Net.ChangeCalculator.Api.csproj reference ./Experian.Net.ChangeCalculator.Logic/Experian.Net.ChangeCalculator.Logic.csproj

20. add the inter project references, in the Terminal window from the repo root, type:
dotnet add ./Experian.Net.ChangeCalculator.Api.Tests/Experian.Net.ChangeCalculator.Api.Tests.csproj reference ./Experian.Net.ChangeCalculator.Api/Experian.Net.ChangeCalculator.Api.csproj
dotnet add ./Experian.Net.ChangeCalculator.Api.Tests/Experian.Net.ChangeCalculator.Api.Tests.csproj reference ./Experian.Net.ChangeCalculator.Shared/Experian.Net.ChangeCalculator.Shared.csproj
dotnet add ./Experian.Net.ChangeCalculator.Api.Tests/Experian.Net.ChangeCalculator.Api.Tests.csproj reference ./Experian.Net.ChangeCalculator.Logic/Experian.Net.ChangeCalculator.Logic.csproj

21. in the Terminal window cd in to the Experian.Net.ChangeCalculator.Api.Tests folder, then type:
dotnet add package FluentAssertions
dotnet add package Microsoft.AspNetCore.Mvc.Testing
dotnet add package FakeItEasy
dotnet add package Xunit.Gherkin.Quick

22. Create a folder called `features` under the Experian.Net.ChangeCalculator.Api.Tests folder  
- Add a file called ControllerSpecs.feature to the features folder 
- Add the following to Experian.Net.ChangeCalculator.Api.Tests.csproj:  

    <ItemGroup>
        <None Update="features\ControllerSpecs.feature">
            <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
        </None>
    </ItemGroup>

23. Add the following to Experian.Net.ChangeCalculator.Api.csproj under the <ImplicitUsings> xml element: 

    <GenerateDocumentationFile>true</GenerateDocumentationFile>
    <NoWarn>$(NoWarn);1591</NoWarn>

24. After removing the Weather Forecast boiler-plate code you get with a new Api project and adding some bare bones implementation code, on my first run of the application using the Swagger UI, after submitting a test POST request, I got an error back where System.Text.Json canâ€™t serialize Dictionary. I had to change the Dictionaries in the TransactionResponse to a List and introduce a new class called Change. This meant I had to introduce a Change to TransactionResponse converter.


TODO:
1. Sort out 400 bad request CORS response issue, via proxy?
2. Add logging
3. Add quantities to denominations
4. add some front-end input validation!
5. front-end styling could be improved for the response
6. Split out integration tests from unit tests in Api
7. Add Jest unit tests for react front-end
8. Async requests?
9. Host in the cloud